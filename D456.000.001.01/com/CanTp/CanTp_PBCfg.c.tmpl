#include "CanTp.h"
#include "CanIf_Lcfg.h"

const PduIdType CANTP_NUM_RX_SDUS = <%- rxsdus.length.toString() + 'U' %>;
const PduIdType CANTP_NUM_TX_SDUS = <%- txsdus.length.toString() + 'U' %>;

static const CanTp_RxNsduCfgType/*CANTP_CONFIG_CONST*/ CanTp_RxNsduCfgInfo[] = {
<%
for (var v of rxsdus) {%>
    {
        <%-v.ch %>U,/* Tp Channel Num */
        <%-v.rxnpdu%>,/* CANTP_RX_NPDU_ID; from  CanIf */
        <%-v.txfcnpdu%>,/* CANTP_TXFC_NPDU_ID; to CanIf */
        25U,/* CANTP_NAR */
        70U,/* CANTP_NBR (N_Br+N_Ar) < 0.9*N_Bs */
        150U,/* CANTP_NCR */
#if !defined(CANTP_RXSDU_PADDING_ENABLE)&&!defined(CANTP_RXSDU_PADDING_DISABLE)
        CANTP_OFF,/* CANTP_PADDING_ACTIVATION */
#endif
        <%-v.tatype%>,/* CANTP_TA_TYPE */
#if !defined(CANTP_ADDRESSING_STANDARD_ONLY)&&!defined(CANTP_ADDRESSING_EXTENDED_ONLY)&&!defined(CANTP_ADDRESSING_MIX_ONLY)
        CANTP_STANDARD,/* CANTP_ADDRESSING_FORMAT */
#endif
        <%- v.bs %>U,/* CANTP_BS */
        <%- v.stmin %>U,/* CANTP_STMIN */
        <%- v.wftmax %>U,/* CANTP_WFTMAX */
        CANTP_UNUSED,/* CANTP_RX_NAE */
        CANTP_UNUSED,/* CANTP_RX_NSA */
        CANTP_UNUSED,/* CANTP_RX_NTA */
    },<%
}%>
};

static const CanTp_TxNsduCfgType/*CANTP_CONFIG_CONST*/ CanTp_TxNsduCfgInfo[] = {
<%
for (var v of txsdus) {%>
    /* CANTP_PDUID_<%-v.name.toUpperCase()%> from PduR */
    {
        <%-v.ch %>U,/* Tp Channel Num */
        <%-v.txnpdu%>,/* CANTP_TX_NPDU_ID; to CanIf */
        <%-v.rxfcnpdu%>,/* CANTP_RXFC_NPDU_ID; from  CanIf */
        25U,/* CANTP_NAS */
        70U,/* CANTP_NBS */
        25U,/* CANTP_NCS */
#if !defined(CANTP_TXSDU_PADDING_ENABLE)&&!defined(CANTP_TXSDU_PADDING_DISABLE)
        CANTP_OFF,/* CANTP_PADDING_ACTIVATION */
#endif
        <%-v.tatype%>,/* CANTP_TA_TYPE */
#if !defined(CANTP_ADDRESSING_STANDARD_ONLY)&&!defined(CANTP_ADDRESSING_EXTENDED_ONLY)&&!defined(CANTP_ADDRESSING_MIX_ONLY)
        CANTP_STANDARD,/* CANTP_ADDRESSING_FORMAT */
#endif
        CANTP_UNUSED,/* CANTP_TX_NAE */
        CANTP_UNUSED,/* CANTP_TX_NSA */
        CANTP_UNUSED,/* CANTP_TX_NTA */
    },<%
}%>
};

#if !defined(CANTP_CHANNEL_HALF_DUPLEX_ONLY) && !defined(CANTP_CHANNEL_FULL_DUPLEX_ONLY)
static const CanTp_ChannelModeType/*CANTP_CONFIG_CONST*/ CanTp_ChannelModeInfo[CANTP_CHANNELS] = {
    {
        CANTP_MODE_HALF_DUPLEX
    },
    {
        CANTP_MODE_HALF_DUPLEX
    }
};
#endif

const CanTp_ConfigType/*CANTP_CONFIG_CONST*/ CanTp_Cfg = {
#if !defined(CANTP_CHANNEL_HALF_DUPLEX_ONLY) && !defined(CANTP_CHANNEL_FULL_DUPLEX_ONLY)
    CanTp_ChannelModeInfo, /* Extended SDU indirection table */
#endif
    CanTp_RxNsduCfgInfo, /* Pointer to RxNsdu-cfg-table */
    CanTp_TxNsduCfgInfo /* Pointer to TxNsdu-cfg-table */
};
